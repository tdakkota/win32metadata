// Code generated by mk_attributes.go, DO NOT EDIT.
package types

import (
	"fmt"
)

var _ fmt.Stringer

// AssemblyHashAlgorithm represents II.23.1.1 Values for AssemblyHashAlgorithm.
type AssemblyHashAlgorithm uint32

// None check None flag.
func (f AssemblyHashAlgorithm) None() bool {
	return f&0 != 0
}

// MD5 check MD5 flag.
func (f AssemblyHashAlgorithm) MD5() bool {
	return f == 32771
}

// SHA1 check SHA1 flag.
func (f AssemblyHashAlgorithm) SHA1() bool {
	return f == 32772
}

// AssemblyFlags represents II.23.1.2 Values for AssemblyFlags.
type AssemblyFlags uint32

// PublicKey check PublicKey flag.
// Denotes: The assembly reference holds the full (unhashed)public key.
func (f AssemblyFlags) PublicKey() bool {
	return f&1 != 0
}

// Retargetable check Retargetable flag.
// Denotes: The implementation of this assembly used at runtime isnot expected to match the version seen at compile time.
func (f AssemblyFlags) Retargetable() bool {
	return f&256 != 0
}

// DisableJITcompileOptimizer check DisableJITcompileOptimizer flag.
func (f AssemblyFlags) DisableJITcompileOptimizer() bool {
	return f&16384 != 0
}

// EnableJITcompileTracking check EnableJITcompileTracking flag.
func (f AssemblyFlags) EnableJITcompileTracking() bool {
	return f&32768 != 0
}

// EventAttributes represents II.23.1.4 Flags for events [EventAttributes].
type EventAttributes uint16

// SpecialName check SpecialName flag.
// Denotes: Event is special.
func (f EventAttributes) SpecialName() bool {
	return f&512 != 0
}

// RTSpecialName check RTSpecialName flag.
// Denotes: CLI provides 'special' behavior, depending upon the name of the event.
func (f EventAttributes) RTSpecialName() bool {
	return f&1024 != 0
}

// FieldAttributes represents II.23.1.5 Flags for fields [FieldAttributes].
type FieldAttributes uint16

// CompilerControlled check CompilerControlled flag.
// Denotes: Member, not, referenceable.
func (f FieldAttributes) CompilerControlled() bool {
	return f&7 == 0
}

// Private check Private flag.
// Denotes: Accessible only by the parent type.
func (f FieldAttributes) Private() bool {
	return f&7 == 1
}

// FamANDAssem check FamANDAssem flag.
// Denotes: Accessible by sub-types only in this Assembly.
func (f FieldAttributes) FamANDAssem() bool {
	return f&7 == 2
}

// Assembly check Assembly flag.
// Denotes: Accessibly by anyone in the Assembly.
func (f FieldAttributes) Assembly() bool {
	return f&7 == 3
}

// Family check Family flag.
// Denotes: Accessible only by type and sub-types.
func (f FieldAttributes) Family() bool {
	return f&7 == 4
}

// FamORAssem check FamORAssem flag.
// Denotes: Accessibly by sub-types anywhere, plus anyone in assembly.
func (f FieldAttributes) FamORAssem() bool {
	return f&7 == 5
}

// Public check Public flag.
// Denotes: Accessibly by anyone who has visibility to this scope field contract attributes.
func (f FieldAttributes) Public() bool {
	return f&7 == 6
}

// Static check Static flag.
// Denotes: Defined on type, else per instance.
func (f FieldAttributes) Static() bool {
	return f&16 != 0
}

// InitOnly check InitOnly flag.
// Denotes: Field can only be initialized, not written to after init.
func (f FieldAttributes) InitOnly() bool {
	return f&32 != 0
}

// Literal check Literal flag.
// Denotes: Value is compile time constant.
func (f FieldAttributes) Literal() bool {
	return f&64 != 0
}

// NotSerialized check NotSerialized flag.
// Denotes: Reserved (to indicate this field should not be serialized when type is remoted).
func (f FieldAttributes) NotSerialized() bool {
	return f&128 != 0
}

// SpecialName check SpecialName flag.
// Denotes: Field is special.
func (f FieldAttributes) SpecialName() bool {
	return f&512 != 0
}

// PInvokeImpl check PInvokeImpl flag.
// Denotes: Implementation is forwarded through PInvoke.
func (f FieldAttributes) PInvokeImpl() bool {
	return f&8192 != 0
}

// RTSpecialName check RTSpecialName flag.
// Denotes: CLI provides 'special' behavior, depending upon the name of the field.
func (f FieldAttributes) RTSpecialName() bool {
	return f&1024 != 0
}

// HasFieldMarshal check HasFieldMarshal flag.
// Denotes: Field has marshalling information.
func (f FieldAttributes) HasFieldMarshal() bool {
	return f&4096 != 0
}

// HasDefault check HasDefault flag.
// Denotes: Field has default.
func (f FieldAttributes) HasDefault() bool {
	return f&32768 != 0
}

// HasFieldRVA check HasFieldRVA flag.
// Denotes: Field has RVA.
func (f FieldAttributes) HasFieldRVA() bool {
	return f&256 != 0
}

// FileAttributes represents II.23.1.6 Flags for files [FileAttributes].
type FileAttributes uint32

// ContainsMetaData check ContainsMetaData flag.
// Denotes: This is not a resource file.
func (f FileAttributes) ContainsMetaData() bool {
	return f&0 != 0
}

// ContainsNoMetaData check ContainsNoMetaData flag.
// Denotes: This is a resource file or other non-metadata-containing file.
func (f FileAttributes) ContainsNoMetaData() bool {
	return f&1 != 0
}

// GenericParamAttributes represents II.23.1.7 Flags for Generic Parameters [GenericParamAttributes].
type GenericParamAttributes uint16

// None check None flag.
// Denotes: The generic parameter is non-variant and has no special constraints.
func (f GenericParamAttributes) None() bool {
	return f&3 == 0
}

// Covariant check Covariant flag.
// Denotes: The generic parameter is covariant.
func (f GenericParamAttributes) Covariant() bool {
	return f&3 == 1
}

// Contravariant check Contravariant flag.
// Denotes: The generic parameter is contravariant.
func (f GenericParamAttributes) Contravariant() bool {
	return f&3 == 2
}

// ReferenceTypeConstraint check ReferenceTypeConstraint flag.
// Denotes: The generic parameter has the class special constraint.
func (f GenericParamAttributes) ReferenceTypeConstraint() bool {
	return f&28 == 4
}

// NotNullableValueTypeConstraint check NotNullableValueTypeConstraint flag.
// Denotes: The generic parameter has the valuetype special constraint.
func (f GenericParamAttributes) NotNullableValueTypeConstraint() bool {
	return f&28 == 8
}

// DefaultConstructorConstraint check DefaultConstructorConstraint flag.
// Denotes: The generic parameter has the .ctor special constraint.
func (f GenericParamAttributes) DefaultConstructorConstraint() bool {
	return f&28 == 16
}

// PInvokeAttributes represents II.23.1.8 Flags for ImplMap [PInvokeAttributes].
type PInvokeAttributes uint16

// NoMangle check NoMangle flag.
// Denotes: PInvoke is to use the member name as specified.
func (f PInvokeAttributes) NoMangle() bool {
	return f&1 != 0
}

// CharSetNotSpec check CharSetNotSpec flag.
func (f PInvokeAttributes) CharSetNotSpec() bool {
	return f&6 == 0
}

// CharSetAnsi check CharSetAnsi flag.
func (f PInvokeAttributes) CharSetAnsi() bool {
	return f&6 == 2
}

// CharSetUnicode check CharSetUnicode flag.
func (f PInvokeAttributes) CharSetUnicode() bool {
	return f&6 == 4
}

// CharSetAuto check CharSetAuto flag.
func (f PInvokeAttributes) CharSetAuto() bool {
	return f&6 == 6
}

// SupportsLastError check SupportsLastError flag.
// Denotes: Information about target function. Not relevant for fields.
func (f PInvokeAttributes) SupportsLastError() bool {
	return f&64 != 0
}

// CallConvPlatformapi check CallConvPlatformapi flag.
func (f PInvokeAttributes) CallConvPlatformapi() bool {
	return f&1792 == 256
}

// CallConvCdecl check CallConvCdecl flag.
func (f PInvokeAttributes) CallConvCdecl() bool {
	return f&1792 == 512
}

// CallConvStdcall check CallConvStdcall flag.
func (f PInvokeAttributes) CallConvStdcall() bool {
	return f&1792 == 768
}

// CallConvThiscall check CallConvThiscall flag.
func (f PInvokeAttributes) CallConvThiscall() bool {
	return f&1792 == 1024
}

// CallConvFastcall check CallConvFastcall flag.
func (f PInvokeAttributes) CallConvFastcall() bool {
	return f&1792 == 1280
}

// ManifestResourceAttributes represents II.23.1.9 Flags for ManifestResource [ManifestResourceAttributes].
type ManifestResourceAttributes uint32

// Public check Public flag.
// Denotes: The Resource is exported from the Assembly.
func (f ManifestResourceAttributes) Public() bool {
	return f&7 == 1
}

// Private check Private flag.
// Denotes: The Resource is private to the Assembly.
func (f ManifestResourceAttributes) Private() bool {
	return f&7 == 2
}

// MethodAttributes represents II.23.1.10 Flags for methods [MethodAttributes].
type MethodAttributes uint16

// CompilerControlled check CompilerControlled flag.
// Denotes: Member, not, referenceable.
func (f MethodAttributes) CompilerControlled() bool {
	return f&7 == 0
}

// Private check Private flag.
// Denotes: Accessible only by the parent type.
func (f MethodAttributes) Private() bool {
	return f&7 == 1
}

// FamANDAssem check FamANDAssem flag.
// Denotes: Accessible by sub-types only in this Assembly.
func (f MethodAttributes) FamANDAssem() bool {
	return f&7 == 2
}

// Assembly check Assembly flag.
// Denotes: Accessibly by anyone in the Assembly.
func (f MethodAttributes) Assembly() bool {
	return f&7 == 3
}

// Family check Family flag.
// Denotes: Accessible only by type and sub-types.
func (f MethodAttributes) Family() bool {
	return f&7 == 4
}

// FamORAssem check FamORAssem flag.
// Denotes: Accessibly by sub-types anywhere, plus anyone in assembly.
func (f MethodAttributes) FamORAssem() bool {
	return f&7 == 5
}

// Public check Public flag.
// Denotes: Accessibly by anyone who has visibility to this scope field contract attributes.
func (f MethodAttributes) Public() bool {
	return f&7 == 6
}

// Static check Static flag.
// Denotes: Defined on type, else per instance.
func (f MethodAttributes) Static() bool {
	return f&16 != 0
}

// Final check Final flag.
// Denotes: Method cannot be overridden.
func (f MethodAttributes) Final() bool {
	return f&32 != 0
}

// Virtual check Virtual flag.
// Denotes: Method is virtual.
func (f MethodAttributes) Virtual() bool {
	return f&64 != 0
}

// HideBySig check HideBySig flag.
// Denotes: Method hides by name+sig, else just by name.
func (f MethodAttributes) HideBySig() bool {
	return f&128 != 0
}

// ReuseSlot check ReuseSlot flag.
// Denotes: Method reuses existing slot in vtable.
func (f MethodAttributes) ReuseSlot() bool {
	return f&256 == 0
}

// NewSlot check NewSlot flag.
// Denotes: Method always gets a new slot in the vtable.
func (f MethodAttributes) NewSlot() bool {
	return f&256 == 256
}

// Strict check Strict flag.
// Denotes: Method can only be overriden if also accessible.
func (f MethodAttributes) Strict() bool {
	return f&512 != 0
}

// Abstract check Abstract flag.
// Denotes: Method does not provide an implementation.
func (f MethodAttributes) Abstract() bool {
	return f&1024 != 0
}

// SpecialName check SpecialName flag.
// Denotes: Method is special.
func (f MethodAttributes) SpecialName() bool {
	return f&2048 != 0
}

// PInvokeImpl check PInvokeImpl flag.
// Denotes: Implementation is forwarded through PInvoke.
func (f MethodAttributes) PInvokeImpl() bool {
	return f&8192 != 0
}

// UnmanagedExport check UnmanagedExport flag.
// Denotes: Reserved: shall be zero for conforming implementations.
func (f MethodAttributes) UnmanagedExport() bool {
	return f&8 != 0
}

// RTSpecialName check RTSpecialName flag.
// Denotes: CLI provides 'special' behavior, depending upon the name of the method.
func (f MethodAttributes) RTSpecialName() bool {
	return f&4096 != 0
}

// HasSecurity check HasSecurity flag.
// Denotes: Method has security associate with it.
func (f MethodAttributes) HasSecurity() bool {
	return f&16384 != 0
}

// RequireSecObject check RequireSecObject flag.
// Denotes: Method calls another method containing security code.
func (f MethodAttributes) RequireSecObject() bool {
	return f&32768 != 0
}

// MethodImplAttributes represents II.23.1.11 Flags for methods [MethodImplAttributes].
type MethodImplAttributes uint16

// IL check IL flag.
// Denotes: Method impl is CIL.
func (f MethodImplAttributes) IL() bool {
	return f&3 == 0
}

// Native check Native flag.
// Denotes: Method impl is native.
func (f MethodImplAttributes) Native() bool {
	return f&3 == 1
}

// OPTIL check OPTIL flag.
// Denotes: Reserved: shall be zero in conforming implementations.
func (f MethodImplAttributes) OPTIL() bool {
	return f&3 == 2
}

// Runtime check Runtime flag.
// Denotes: Method impl is provided by the runtime.
func (f MethodImplAttributes) Runtime() bool {
	return f&3 == 3
}

// Unmanaged check Unmanaged flag.
// Denotes: Method impl is unmanaged, otherwise managed.
func (f MethodImplAttributes) Unmanaged() bool {
	return f&4 == 4
}

// Managed check Managed flag.
// Denotes: Method impl is managed.
func (f MethodImplAttributes) Managed() bool {
	return f&4 == 0
}

// ForwardRef check ForwardRef flag.
// Denotes: Indicates method is defined; used primarily in merge scenarios.
func (f MethodImplAttributes) ForwardRef() bool {
	return f&16 != 0
}

// PreserveSig check PreserveSig flag.
// Denotes: Reserved: conforming implementations can ignore.
func (f MethodImplAttributes) PreserveSig() bool {
	return f&128 != 0
}

// InternalCall check InternalCall flag.
// Denotes: Reserved: shall be zero in conforming implementations.
func (f MethodImplAttributes) InternalCall() bool {
	return f&4096 != 0
}

// Synchronized check Synchronized flag.
// Denotes: Method is single threaded through the body.
func (f MethodImplAttributes) Synchronized() bool {
	return f&32 != 0
}

// NoInlining check NoInlining flag.
// Denotes: Method cannot be inlined.
func (f MethodImplAttributes) NoInlining() bool {
	return f&8 != 0
}

// MaxMethodImplVal check MaxMethodImplVal flag.
// Denotes: Range check value.
func (f MethodImplAttributes) MaxMethodImplVal() bool {
	return f&65535 != 0
}

// NoOptimization check NoOptimization flag.
// Denotes: Method will not be optimized when generating native code.
func (f MethodImplAttributes) NoOptimization() bool {
	return f&64 != 0
}

// MethodSemanticsAttributes represents II.23.1.12 Flags for MethodSemantics [MethodSemanticsAttributes].
type MethodSemanticsAttributes uint16

// Setter check Setter flag.
// Denotes: Setter for property.
func (f MethodSemanticsAttributes) Setter() bool {
	return f&1 != 0
}

// Getter check Getter flag.
// Denotes: Getter for property.
func (f MethodSemanticsAttributes) Getter() bool {
	return f&2 != 0
}

// Other check Other flag.
// Denotes: Other method for property or event.
func (f MethodSemanticsAttributes) Other() bool {
	return f&4 != 0
}

// AddOn check AddOn flag.
// Denotes: AddOn method for event. This refers to the required add_ method for events (§22.13).
func (f MethodSemanticsAttributes) AddOn() bool {
	return f&8 != 0
}

// RemoveOn check RemoveOn flag.
// Denotes: RemoveOn method for event. . This refers to the required remove_ method for events (§22.13).
func (f MethodSemanticsAttributes) RemoveOn() bool {
	return f&16 != 0
}

// Fire check Fire flag.
// Denotes: Fire method for event. This refers to the optional raise_ method for events (§22.13).
func (f MethodSemanticsAttributes) Fire() bool {
	return f&32 != 0
}

// ParamAttributes represents II.23.1.13 Flags for params [ParamAttributes].
type ParamAttributes uint16

// In check In flag.
// Denotes: Param is [In].
func (f ParamAttributes) In() bool {
	return f&1 != 0
}

// Out check Out flag.
// Denotes: Param is [out].
func (f ParamAttributes) Out() bool {
	return f&2 != 0
}

// Optional check Optional flag.
// Denotes: Param is optional.
func (f ParamAttributes) Optional() bool {
	return f&16 != 0
}

// HasDefault check HasDefault flag.
// Denotes: Param has default value.
func (f ParamAttributes) HasDefault() bool {
	return f&4096 != 0
}

// HasFieldMarshal check HasFieldMarshal flag.
// Denotes: Param has FieldMarshal.
func (f ParamAttributes) HasFieldMarshal() bool {
	return f&8192 != 0
}

// Unused check Unused flag.
// Denotes: Reserved: shall be zero in a conforming implementation.
func (f ParamAttributes) Unused() bool {
	return f&53216 != 0
}

// PropertyAttributes represents II.23.1.14 Flags for properties [PropertyAttributes].
type PropertyAttributes uint16

// SpecialName check SpecialName flag.
// Denotes: Property is special.
func (f PropertyAttributes) SpecialName() bool {
	return f&512 != 0
}

// RTSpecialName check RTSpecialName flag.
// Denotes: Runtime(metadata internal APIs) should check name encoding.
func (f PropertyAttributes) RTSpecialName() bool {
	return f&1024 != 0
}

// HasDefault check HasDefault flag.
// Denotes: Property has default.
func (f PropertyAttributes) HasDefault() bool {
	return f&4096 != 0
}

// Unused check Unused flag.
// Denotes: Reserved: shall be zero in a conforming implementation.
func (f PropertyAttributes) Unused() bool {
	return f&59903 != 0
}

// TypeAttributes represents II.23.1.15 Flags for types [TypeAttributes].
type TypeAttributes uint32

// NotPublic check NotPublic flag.
// Denotes: Class has no public scope.
func (f TypeAttributes) NotPublic() bool {
	return f&7 == 0
}

// Public check Public flag.
// Denotes: Class has public scope.
func (f TypeAttributes) Public() bool {
	return f&7 == 1
}

// NestedPublic check NestedPublic flag.
// Denotes: Class is nested with public visibility.
func (f TypeAttributes) NestedPublic() bool {
	return f&7 == 2
}

// NestedPrivate check NestedPrivate flag.
// Denotes: Class is nested with private visibility.
func (f TypeAttributes) NestedPrivate() bool {
	return f&7 == 3
}

// NestedFamily check NestedFamily flag.
// Denotes: Class is nested with family visibility.
func (f TypeAttributes) NestedFamily() bool {
	return f&7 == 4
}

// NestedAssembly check NestedAssembly flag.
// Denotes: Class is nested with assembly visibility.
func (f TypeAttributes) NestedAssembly() bool {
	return f&7 == 5
}

// NestedFamANDAssem check NestedFamANDAssem flag.
// Denotes: Class is nested with family and assembly visibility.
func (f TypeAttributes) NestedFamANDAssem() bool {
	return f&7 == 6
}

// NestedFamORAssem check NestedFamORAssem flag.
// Denotes: Class is nested with family or assembly visibility.
func (f TypeAttributes) NestedFamORAssem() bool {
	return f&7 == 7
}

// AutoLayout check AutoLayout flag.
// Denotes: Class fields are auto-laid out.
func (f TypeAttributes) AutoLayout() bool {
	return f&24 == 0
}

// SequentialLayout check SequentialLayout flag.
// Denotes: Class fields are laid out sequentially.
func (f TypeAttributes) SequentialLayout() bool {
	return f&24 == 8
}

// ExplicitLayout check ExplicitLayout flag.
// Denotes: Layout is supplied explicitly.
func (f TypeAttributes) ExplicitLayout() bool {
	return f&24 == 16
}

// Class check Class flag.
// Denotes: Type is a class.
func (f TypeAttributes) Class() bool {
	return f&32 == 0
}

// Interface check Interface flag.
// Denotes: Type is an interface.
func (f TypeAttributes) Interface() bool {
	return f&32 == 32
}

// Abstract check Abstract flag.
// Denotes: Class is abstract.
func (f TypeAttributes) Abstract() bool {
	return f&128 != 0
}

// Sealed check Sealed flag.
// Denotes: Class cannot be extended.
func (f TypeAttributes) Sealed() bool {
	return f&256 != 0
}

// SpecialName check SpecialName flag.
// Denotes: Class name is special.
func (f TypeAttributes) SpecialName() bool {
	return f&1024 != 0
}

// Import check Import flag.
// Denotes: Class/Interface is imported.
func (f TypeAttributes) Import() bool {
	return f&4096 != 0
}

// Serializable check Serializable flag.
// Denotes: Reserved (Class is serializable).
func (f TypeAttributes) Serializable() bool {
	return f&8192 != 0
}

// AnsiClass check AnsiClass flag.
// Denotes: LPSTR is interpreted as ANSI.
func (f TypeAttributes) AnsiClass() bool {
	return f&196608 == 0
}

// UnicodeClass check UnicodeClass flag.
// Denotes: LPSTR is interpreted as Unicode.
func (f TypeAttributes) UnicodeClass() bool {
	return f&196608 == 65536
}

// AutoClass check AutoClass flag.
// Denotes: LPSTR is interpreted automatically.
func (f TypeAttributes) AutoClass() bool {
	return f&196608 == 131072
}

// CustomFormatClass check CustomFormatClass flag.
// Denotes: A non-standard encoding specified by CustomStringFormatMask.
func (f TypeAttributes) CustomFormatClass() bool {
	return f&196608 == 196608
}

// BeforeFieldInit check BeforeFieldInit flag.
// Denotes: Initialize the class before first static field access.
func (f TypeAttributes) BeforeFieldInit() bool {
	return f&1048576 != 0
}

// RTSpecialName check RTSpecialName flag.
// Denotes: CLI provides 'special' behavior, depending upon the name of the Type.
func (f TypeAttributes) RTSpecialName() bool {
	return f&2048 != 0
}

// HasSecurity check HasSecurity flag.
// Denotes: Type has security associate with it.
func (f TypeAttributes) HasSecurity() bool {
	return f&262144 != 0
}

// IsTypeForwarder check IsTypeForwarder flag.
// Denotes: This ExportedType entry is a type forwarder.
func (f TypeAttributes) IsTypeForwarder() bool {
	return f&2097152 != 0
}
